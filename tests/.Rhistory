library(robustbase)
source(system.file("test-tools-1.R",  package = "Matrix", mustWork=TRUE))
write.csv(DNase, file="input.NLROBMM.csv", row.names=TRUE)
show(DNase)
View(DNase)
DNase1 <- DNase[DNase$Run == 1,]
View(DNase1)
View(DNase1)
write.csv(DNase1, file="input.NLROBMM.csv", row.names=TRUE)
DNase1 <- DNase[DNase$Run == 1,]
form <- density ~ Asym/(1 + exp(( xmid -log(conc) )/scal ))
pnms <- c("Asym", "xmid", "scal")
psNms <- c(pnms, "sigma")
setNames. <- function(x, nm) setNames(rep_len(x, length(nm)), nm)
setNames.(0, pnms)
fMM <- robustbase:::nlrob.MM(form, data = DNase1,
lower = setNames.(0, pnms), upper = 3,
## call to nlrob.control to pass 'optim.control':
ctrl = nlrob.control("MM", optim.control = list(trace = 1),
optArgs = list(trace = TRUE)))
fMM
View(fMM)
write.csv(fMM, file="output.NLROBMM.csv", row.names=TRUE)
c(fMM$coefficients, fMM$fitted.values, fMM$residuals, fMM$hessian)
fMM$ctrl
fMM <- robustbase:::nlrob.MM(form, data = DNase1,
lower = setNames.(0, pnms), upper = 3,
## call to nlrob.control to pass 'optim.control':
ctrl = nlrob.control("MM", optim.control = list(trace = 1),
optArgs = list(trace = FALSE)))
list(fMM$coefficients, fMM$fitted.values, fMM$residuals, fMM$hessian)
help(list)
typeof(DNase1)
a <- list(fMM$coefficients, fMM$fitted.values, fMM$residuals, fMM$hessian)
View(a)
View(a)
setNames(a, c("coefficients", "fitted.values", "ressiduals", "hessian"))
a <- setNames(a, c("coefficients", "fitted.values", "ressiduals", "hessian"))
a
View(a)
a
write.csv(a, file="output.NLROBMM.csv", row.names=TRUE)
help(eval)
form
xmid
form[[3L]]
eval(form[[3L]])
DNase1
c
c(DNase1)
eval(formula, c(DNase1))
y.hat <- eval(formula, c(DNase1))
View(y.hat)
y.hat
form[[2L]]
eval(formula, c(DNase1))
y.hat <- eval( formula[[3L]], c(data, setNames(par, pnames)) )
y.hat <- eval( formula[[3L]], c(data, setNames(par, pnames))
)
formula
form
y.hat <- eval( form[[3L]], c(data, setNames(par, pnames))
)
form
DNase1
help("nlrob")
xmid
form
y.hat
typeof(y.hat)
y.hat()
y.hat(0,0,0)
y.hat <- eval( form[[3L]], c(data))
y.hat <- eval( form[[3L]], c(data, setNames(par, pnames))
)
y.hat
y.hat(1)
y.hat(form)
eval()
eval(form)
eval(form, DNase1)
eval(form, c(DNase1))
y.hat <- eval(form, c(DNase1))
y.hat
y.hat <- eval(form[[3]], c(DNase1))
Asym = 0
y.hat <- eval(form[[3]], c(DNase1))
xmid = 0
y.hat <- eval(form[[3]], c(DNase1))
scal = 1
y.hat <- eval(form[[3]], c(DNase1))
y.hat
ls
edit(robustbase:::nlrob.MM())
edit(robustbase:::nlrob.MM
)
edit(robustbase:::nlrob.MM)
edit(robustbase:::nlrob.MM)
edit(robustbase:::nlrob.MM)
edit(robustbase:::nlrob.MM)
fMM <- robustbase:::nlrob.MM(form, data = DNase1,
lower = setNames.(0, pnms), upper = 3,
## call to nlrob.control to pass 'optim.control':
ctrl = nlrob.control("MM", optim.control = list(trace = 1),
optArgs = list(trace = FALSE)))
fMM <- robustbase:::nlrob.MM(form, data = DNase1,
lower = setNames.(0, pnms), upper = 3,
## call to nlrob.control to pass 'optim.control':
ctrl = nlrob.control("MM", optim.control = list(trace = 1),
optArgs = list(trace = FALSE)))
library(robustbase)
fMM <- robustbase:::nlrob.MM(form, data = DNase1,
lower = setNames.(0, pnms), upper = 3,
## call to nlrob.control to pass 'optim.control':
ctrl = nlrob.control("MM", optim.control = list(trace = 1),
optArgs = list(trace = FALSE)))
print("hola")
edit(robustbase:::nlrob.MM)
fMM <- robustbase:::nlrob.MM(form, data = DNase1,
lower = setNames.(0, pnms), upper = 3,
## call to nlrob.control to pass 'optim.control':
ctrl = nlrob.control("MM", optim.control = list(trace = 1),
optArgs = list(trace = FALSE)))
edit(nls)
edit(optim)
help(nls)
edit(optim)
library(robustbase)
library(robustbase)
nlrob.MM  <- robustbase:::nlrob.MM
edit(nlrob.MM)
edit(optim)
gr <- NULL
gr1 <- if (!is.null(gr))
function(par) gr(par, ...)
gr1
edit(nlrob.MM)
edit(optim)
edit(nlrob.MM)
source(system.file("test-tools-1.R",  package = "Matrix", mustWork=TRUE))
DNase1 <- DNase[ DNase$Run == 1, ]
form <- density ~ Asym/(1 + exp(( xmid -log(conc) )/scal))
pnms <- c("Asym", "xmid", "scal")
psNms <- c(pnms, "sigma")
setNames. <- function(x, nm) setNames(rep_len(x, length(nm)), nm)
write.csv(DNase1, "Function=NLROBInput.csv")
## robust
set.seed(2345) # for reproducibility
Rfit.MM.S.bisquare <-
nlrob(form, data = DNase1,
lower = setNames.(0, pnms), upper = c(1),
method="MM")
write.csv(Rfit.MM.S.bisquare$residuals, "Function=NLROBMM.Data=residuals.csv")
write.csv(Rfit.MM.S.bisquare$coefficients, "Function=NLROBMM.Data=coefficients.csv")
set.seed(2345) # for reproducibility
Rfit.tau.bisquare <- nlrob(form, data = DNase1,
lower = setNames.(0, pnms), upper = c(1),
method="tau")
set.seed(2345) # for reproducibility
write.csv(Rfit.tau.bisquare$residuals, "Function=NLROBtau.Data=residuals.csv")
write.csv(Rfit.tau.bisquare$coefficients, "Function=NLROBtau.Data=coefficients.csv")
set.seed(2345) # for reproducibility
Rfit.CM <- nlrob(form, data = DNase1,
lower = setNames.(0, pnms), upper = c(1),
method="CM")
write.csv(Rfit.CM$residuals, "Function=NLROBCM.Data=residuals.csv")
write.csv(Rfit.CM$coefficients, "Function=NLROBCM.Data=coefficients.csv")
set.seed(2345) # for reproducibility
Rfit.mtl <- nlrob(form, data = DNase1,
lower = setNames.(0, pnms), upper = c(1),
method="mtl")
write.csv(Rfit.mtl$residuals, "Function=NLROBmtl.Data=residuals.csv")
write.csv(Rfit.mtl$coefficients, "Function=NLROBmtl.Data=coefficients.csv")
Cfit
Cfit <- nlrob(form, data = DNase1, start= setNames.(1, pnms),
method="M")
write.csv(Cfit$residuals, "Function=NLROBM.Data=residuals.csv")
write.csv(Cfit$coefficients, "Function=NLROBM.Data=coefficients.csv")
Cfit <- nls(form, data=DNase1, start= c(Asym = 1, scal = 0.1, xmid = 0.4),
control = nls.control(tol = 8e-8, printEval = TRUE))
Cfit
Cfit$m$getPars()
help("nlrob")
